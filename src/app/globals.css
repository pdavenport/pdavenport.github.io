@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --foreground-rgb: 0, 0, 0;
  --background-start-rgb: 214, 219, 220;
  --background-end-rgb: 255, 255, 255;
}

@media (prefers-color-scheme: dark) {
  :root {
    --foreground-rgb: 255, 255, 255;
    --background-start-rgb: 0, 0, 0;
    --background-end-rgb: 0, 0, 0;
  }
}

body {
  color: rgb(var(--foreground-rgb));
  background: linear-gradient(
      to bottom,
      transparent,
      rgb(var(--background-end-rgb))
    )
    rgb(var(--background-start-rgb));
}

:root {
  --speed: calc(var(--duration) * 1s);
  --accent: hsl(6 90% 50%);
  --bounce-out: linear(
    0 0%, 0.5583 3.72%, 0.9549 7.72%,
    1.0968 9.86%, 1.2039 12.13%,
    1.2783 14.57%, 1.3213 17.23%,
    1.3317 18.7%, 1.3345 20.27%,
    1.3296 21.97%, 1.3171 23.83%,
    1.2806 27.25%, 1.1551 36.58%,
    1.096 41.71%, 1.0465 47.53%,
    1.014 53.68%, 0.997 59.87%,
    0.9899 67.32%, 1 100%
  );
  --easing: linear(
     0 0%, 0.0027 3.64%, 0.0106 7.29%,
     0.0425 14.58%, 0.0957 21.87%,
     0.1701 29.16%, 0.2477 35.19%,
     0.3401 41.23%, 0.5982 55.18%,
     0.7044 61.56%, 0.7987 68.28%, 0.875 75%,
     0.9297 81.25%, 0.9687 87.5%,
     0.9922 93.75%, 1 100%
   );
  accent-color: var(--accent);
}

*,
  *:after,
  *:before {
    box-sizing: border-box;
    color: inherit;
    font: inherit;
    outline-color: var(--accent);
  }

  body {
    display: grid;
    place-items: center;
    min-height: 100vh;
    font-family: 'SF Pro Text', 'SF Pro Icons', 'AOS Icons', 'Helvetica Neue',
      Helvetica, Arial, sans-serif, system-ui;
    color: canvasText;
  }
  html,
  [data-theme=light] {
    color-scheme: light only;
  }

  [data-theme=dark] {
    color-scheme: dark only;
  }
  @media (prefers-color-scheme: dark) {
    html {
      color-scheme: dark only;
    }
  }

  body::before {
    --line: color-mix(in lch, canvasText 25%, transparent);
    --size: 40px;
    content: '';
    height: 100vh;
    width: 100vw;
    position: fixed;
    background: linear-gradient(
          90deg,
          var(--line) 1px,
          transparent 1px var(--size)
        )
        0 -5vmin / var(--size) var(--size),
      linear-gradient(var(--line) 1px, transparent 1px var(--size)) 0 -5vmin / var(
          --size
        ) var(--size);
    mask: linear-gradient(-30deg, transparent 60%, white);
    top: 0;
    z-index: -1;
  }

  h1 {
    font-size: clamp(2rem, 2vw + 1rem, 8rem);
    font-weight: 600;
    color: color-mix(canvasText, canvas 15%);
  }

  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border-width: 0;
  }

  .bear-link {
    color: canvasText;
    position: fixed;
    top: 1rem;
    left: 1rem;
    width: 48px;
    aspect-ratio: 1;
    display: grid;
    place-items: center;
    opacity: 0.8;
  }

  :where(.x-link, .bear-link):is(:hover, :focus-visible) {
    opacity: 1;
  }
  .bear-link svg {
    width: 75%;
  }

  .open {
    position: fixed;
    top: 1rem;
    right: 1rem;
  }
  button {
    border-radius: 6px;
    border: 0;
    background: transparent;
    color: color-mix(in lch, canvasText, canvas 25%);
    cursor: pointer;
    background: color-mix(
      in lch,
      canvas,
      canvasText calc(var(--intent, 0) * 15%)
    );
  }

  button:has(svg) {
    padding: 0;
    display: grid;
    place-items: center;
    width: 48px;
    aspect-ratio: 1;

  }

  button svg {
    width: 50%;
  }

  .close {
    position: absolute;
    top: 1rem;
    right: 1rem;
  }

  .open svg {
    rotate: calc(var(--intent, 0) * 180deg);
    transition: rotate 0.25s linear;
  }

  button:is(:hover, :focus-visible) {
    --intent: 1;
  }

  hr {
    width: 100%;
    opacity: 0.4;
  }

  header > a {
    padding-block: 6px;
  }

  .details {
    display: grid;
    gap: 0 0.5rem;
    place-items: center;
    justify-content: start;
    grid-template: 1fr 1fr / auto 1fr;
    margin-bottom: 0.5em;
  }

  .details :is(a, span) {
    justify-self: start;
  }

  .details span { align-self: end; font-weight: 600; }
  .details a { align-self: start; text-decoration: none; }

  .details img {
    border-radius: 50%;
    grid-row: span 2;
  }

  a {
    display: flex;
    text-decoration: none;
    justify-content: space-between;
  }

  :is(a, label) {
    color: color-mix(in lch, canvasText, transparent 50%);
  }
  a:is(:hover, :focus-visible) {
    --intent: 1;
    color: canvasText;
  }

  header a svg {
    width: 16px;
  }

  header a svg path {
    transform-box: fill-box;
    transform-origin: center;
  }
  header a:is(:hover, :focus-visible) svg path {
    transition: translate 0.25s var(--easing);
  }

  header a svg path:first-of-type {
    translate: calc(-150% + (var(--intent, 0) * 150%)) calc(150% - (var(--intent, 0) * 150%));
  }
  header a svg path:last-of-type {
    translate: calc(var(--intent, 0) * 150%) calc(var(--intent, 0) * -150%);
  }

  footer {
    display: flex;
    justify-content: flex-end;
    gap: 0.5rem;
    grid-column: 1 / -1;
  }

  footer button {
    padding: 0.5rem 1rem;
  }

  footer button:last-of-type {
    background: color-mix(in lch, canvasText, canvas calc(var(--intent, 0) * 30%));
    color: canvas;
  }

  form {
    display: grid;
    align-items: center;
    grid-template-columns: 1fr auto;
  }

  form hr {
    grid-column: 1 / -1;
  }

  label {
    padding-block: 6px;
  }

  .switch {
    cursor: pointer;
    display: inline-block;
    border: 1px solid color-mix(in lch, currentColor, transparent);
    width: 24px;
    height: 16px;
    border-radius: 100px;
    justify-self: end;
    position: relative;
  }

  .switch:has(input:focus-visible) {
    outline: 2px solid var(--accent);
    outline-offset: 2px;
  }

  .switch:has(:checked)::after {
    background: var(--accent);
    translate: 8px 0;
  }

  .switch::after {
    background: currentColor;
    content: "";
    position: absolute;
    left: 0;
    top: 0%;
    height: 100%;
    aspect-ratio: 1;
    border-radius: 50%;
    transition: background 0.2s var(--easing), translate 0.2s var(--easing);
  }

  ::view-transition-new(root) {
    animation: reveal 1s;
    clip-path: inset(0 0 0 0);
    z-index: 2;
  }
  ::view-transition-old(root) {
    z-index: -1;
    animation: none;
  }
  @keyframes reveal { from { clip-path: inset(var(--from)); } }

  [data-theme=dark] { --from: 0 0 100% 0; }
  [data-theme=light] { --from: 100% 0 0 0; }
  [data-theme=system] { --from: 0 100% 0 0; }
